%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 78b2425a2284af743826c689403a4924, type: 3}
  m_Name: SF_LightingCalc
  m_EditorClassIdentifier: 
  m_functionInfo: "// Made with Amplify Shader Editor v1.9.3.2\n// Available at the
    Unity Asset Store - http://u3d.as/y3X \n/*ASEBEGIN\nVersion=19302\nNode;AmplifyShaderEditor.SaturateNode;8;-29.88484,17.44849;Inherit;False;1;0;FLOAT;0;False;1;FLOAT;0\nNode;AmplifyShaderEditor.WorldPosInputsNode;7;-659.8439,-220.183;Inherit;True;0;4;FLOAT3;0;FLOAT;1;FLOAT;2;FLOAT;3\nNode;AmplifyShaderEditor.WorldNormalVector;6;-441.8971,82.61842;Inherit;False;False;1;0;FLOAT3;0,0,1;False;4;FLOAT3;0;FLOAT;1;FLOAT;2;FLOAT;3\nNode;AmplifyShaderEditor.DotProductOpNode;5;-144.097,19.21841;Inherit;False;2;0;FLOAT;0;False;1;FLOAT3;0,0,0;False;1;FLOAT;0\nNode;AmplifyShaderEditor.CustomExpressionNode;1;-328.3004,-61.6695;Inherit;False;#ifndef
    CUSTOM_LIGHTING_INCLUDED$#define CUSTOM_LIGHTING_INCLUDED$$void MainLight_float(float3
    WorldPos, out float3 Direction, out float3 Color, out float DistanceAtten, out
    float ShadowAtten)${$#if SHADERGRAPH_PREVIEW$    Direction = float3(0.5, 0.5,
    0)@$    Color = 1@$    DistanceAtten = 1@$    ShadowAtten = 1@$#else$#if SHADOWS_SCREEN$   
    float4 clipPos = TransformWorldToHClip(WorldPos)@$    float4 shadowCoord = ComputeScreenPos(clipPos)@$#else$   
    float4 shadowCoord = TransformWorldToShadowCoord(WorldPos)@$#endif$    Light
    mainLight = GetMainLight(shadowCoord)@$    Direction = mainLight.direction@$   
    Color = mainLight.color@$    DistanceAtten = mainLight.distanceAttenuation@$   
    ShadowSamplingData shadowSamplingData = GetMainLightShadowSamplingData()@$   
    float shadowStrength = GetMainLightShadowStrength()@$    ShadowAtten = SampleShadowmap(shadowCoord,
    TEXTURE2D_ARGS(_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture),
    shadowSamplingData, shadowStrength, false)@ $#endif$}$$void MainLight_half(float3
    WorldPos, out half3 Direction, out half3 Color, out half DistanceAtten, out half
    ShadowAtten)${$#if SHADERGRAPH_PREVIEW$    Direction = half3(0.5, 0.5, 0)@$   
    Color = 1@$    DistanceAtten = 1@$    ShadowAtten = 1@$#else$#if SHADOWS_SCREEN$   
    half4 clipPos = TransformWorldToHClip(WorldPos)@$    half4 shadowCoord = ComputeScreenPos(clipPos)@$#else$   
    half4 shadowCoord = TransformWorldToShadowCoord(WorldPos)@$#endif$    Light mainLight
    = GetMainLight(shadowCoord)@$    Direction = mainLight.direction@$    Color =
    mainLight.color@$    DistanceAtten = mainLight.distanceAttenuation@$    ShadowSamplingData
    shadowSamplingData = GetMainLightShadowSamplingData()@$    float shadowStrength
    = GetMainLightShadowStrength()@$    ShadowAtten = SampleShadowmap(shadowCoord,
    TEXTURE2D_ARGS(_MainLightShadowmapTexture, sampler_MainLightShadowmapTexture),
    shadowSamplingData, shadowStrength, false)@ $#endif$}$$void DirectSpecular_float(float3
    Specular, float Smoothness, float3 Direction, float3 Color, float3 WorldNormal,
    float3 WorldView, out float3 Out)${$#if SHADERGRAPH_PREVIEW$    Out = 0@$#else$   
    Smoothness = exp2(10 * Smoothness + 1)@$    WorldNormal = normalize(WorldNormal)@$   
    WorldView = SafeNormalize(WorldView)@$    Out = LightingSpecular(Color, Direction,
    WorldNormal, WorldView, float4(Specular, 0), Smoothness)@$#endif$}$$void DirectSpecular_half(half3
    Specular, half Smoothness, half3 Direction, half3 Color, half3 WorldNormal, half3
    WorldView, out half3 Out)${$#if SHADERGRAPH_PREVIEW$    Out = 0@$#else$    Smoothness
    = exp2(10 * Smoothness + 1)@$    WorldNormal = normalize(WorldNormal)@$    WorldView
    = SafeNormalize(WorldView)@$    Out = LightingSpecular(Color, Direction, WorldNormal,
    WorldView,half4(Specular, 0), Smoothness)@$#endif$}$$void AdditionalLights_float(float3
    SpecColor, float Smoothness, float3 WorldPosition, float3 WorldNormal, float3
    WorldView, out float3 Diffuse, out float3 Specular)${$    float3 diffuseColor
    = 0@$    float3 specularColor = 0@$$#ifndef SHADERGRAPH_PREVIEW$    Smoothness
    = exp2(10 * Smoothness + 1)@$    WorldNormal = normalize(WorldNormal)@$    WorldView
    = SafeNormalize(WorldView)@$    int pixelLightCount = GetAdditionalLightsCount()@$   
    for (int i = 0@ i < pixelLightCount@ ++i)$    {$        Light light = GetAdditionalLight(i,
    WorldPosition)@$        half3 attenuatedLightColor = light.color * (light.distanceAttenuation
    * light.shadowAttenuation)@$        diffuseColor += LightingLambert(attenuatedLightColor,
    light.direction, WorldNormal)@$        specularColor += LightingSpecular(attenuatedLightColor,
    light.direction, WorldNormal, WorldView, float4(SpecColor, 0), Smoothness)@$   
    }$#endif$$    Diffuse = diffuseColor@$    Specular = specularColor@$}$$void AdditionalLights_half(half3
    SpecColor, half Smoothness, half3 WorldPosition, half3 WorldNormal, half3 WorldView,
    out half3 Diffuse, out half3 Specular)${$    half3 diffuseColor = 0@$    half3
    specularColor = 0@$$#ifndef SHADERGRAPH_PREVIEW$    Smoothness = exp2(10 * Smoothness
    + 1)@$    WorldNormal = normalize(WorldNormal)@$    WorldView = SafeNormalize(WorldView)@$   
    int pixelLightCount = GetAdditionalLightsCount()@$    for (int i = 0@ i < pixelLightCount@
    ++i)$    {$        Light light = GetAdditionalLight(i, WorldPosition)@$       
    half3 attenuatedLightColor = light.color * (light.distanceAttenuation * light.shadowAttenuation)@$       
    diffuseColor += LightingLambert(attenuatedLightColor, light.direction, WorldNormal)@$       
    specularColor += LightingSpecular(attenuatedLightColor, light.direction, WorldNormal,
    WorldView, half4(SpecColor, 0), Smoothness)@$    }$#endif$$    Diffuse = diffuseColor@$   
    Specular = specularColor@$}$$#endif;1;Create;1;True;In0;FLOAT;0;In;;Inherit;False;MainLightData;False;False;0;;False;1;0;FLOAT;0;False;1;FLOAT;0\nNode;AmplifyShaderEditor.FunctionOutput;0;160.7964,-10.07072;Inherit;True;True;-1;Output;0;True;1;0;FLOAT;0;False;1;FLOAT;0\nWireConnection;8;0;5;0\nWireConnection;5;0;1;0\nWireConnection;5;1;6;0\nASEEND*/\n//CHKSM=AAB4B14A3FC015F7FD27CC430B86A982A3219B7E"
  m_functionName: 
  m_description: 
  m_additionalIncludes:
    m_additionalIncludes: []
    m_outsideIncludes: []
  m_additionalPragmas:
    m_additionalPragmas: []
    m_outsidePragmas: []
  m_additionalDirectives:
    m_validData: 0
    m_isDirty: 0
    m_moduleName: ' Additional Directives'
    m_independentModule: 1
    m_customEdited: 0
    m_additionalDirectives: []
    m_shaderFunctionDirectives: []
    m_nativeDirectives: []
    m_nativeDirectivesIndex: -1
    m_nativeDirectivesFoldout: 0
    m_directivesSaveItems: []
  m_nodeCategory: 5
  m_headerStyle: 0
  m_headerColor: {r: 1, g: 0.4, b: 0, a: 1}
  m_customNodeCategory: 
  m_previewPosition: 0
  m_hidden: 0
  m_url: 
