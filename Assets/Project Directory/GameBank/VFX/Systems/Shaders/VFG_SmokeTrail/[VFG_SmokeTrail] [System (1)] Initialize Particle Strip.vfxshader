//[VFG_SmokeTrail] [System (1)] Initialize Particle Strip,2
//Don't delete the previous line or this one
#pragma kernel CSMain
#pragma only_renderers d3d11 glcore gles3 metal vulkan xboxone xboxone xboxseries playstation ps5 switch


#define NB_THREADS_PER_GROUP 64
#define HAS_VFX_ATTRIBUTES 1
#define VFX_PASSDEPTH_ACTUAL (0)
#define VFX_PASSDEPTH_MOTION_VECTOR (1)
#define VFX_PASSDEPTH_SELECTION (2)
#define VFX_PASSDEPTH_PICKING (3)
#define VFX_PASSDEPTH_SHADOW (4)
#define VFX_USE_ALIVE_CURRENT 1
#define VFX_USE_SIZE_CURRENT 1
#define VFX_USE_VELOCITY_CURRENT 1
#define VFX_USE_POSITION_CURRENT 1
#define VFX_USE_TARGETPOSITION_CURRENT 1
#define VFX_USE_ALPHA_CURRENT 1
#define VFX_USE_AGE_CURRENT 1
#define VFX_USE_POSITION_SOURCE 1
#define STRIP_COUNT 1000u
#define PARTICLE_PER_STRIP_COUNT 500u
#define RAW_CAPACITY 500000u
#define VFX_USE_SPAWNER_FROM_GPU 1
#define HAS_STRIPS 1
#define VFX_STATIC_SOURCE_COUNT (0)
#define VFX_LOCAL_SPACE 1
#include "Packages/com.unity.render-pipelines.universal/Runtime/VFXGraph/Shaders/VFXDefines.hlsl"
#define VFX_USE_GRAPH_VALUES 1
#define VFX_USE_INSTANCING 1
#define VFX_INSTANCING_VARIABLE_SIZE 1
#define VFX_INSTANCING_ACTIVE_INDIRECTION 1
#define VFX_INSTANCING_BATCH_INDIRECTION 1



struct GraphValues
{
    bool _vfx_enabled_a;
    bool Alive_a;
    bool _vfx_enabled_b;
    float Size_a;
    bool _vfx_enabled_c;
    float3 Velocity_a;
    bool _vfx_enabled_d;
    bool _vfx_enabled_e;
    float3 TargetPosition_a;
};
ByteAddressBuffer graphValuesBuffer;



struct VFXAttributes
{
    bool alive;
    float size;
    float3 velocity;
    float3 position;
    float3 targetPosition;
    float alpha;
    float age;
};

struct VFXSourceAttributes
{
    float3 position;
};



















// Strips tangent computation














#define USE_DEAD_LIST (VFX_USE_ALIVE_CURRENT && !HAS_STRIPS)

#define USE_PREFIX_SUM_SPAWNCOUNT ((VFX_STATIC_SOURCE_COUNT > 1) || (VFX_USE_DYNAMIC_SOURCE_COUNT) || VFX_USE_INSTANCING)

RWByteAddressBuffer attributeBuffer;
ByteAddressBuffer sourceAttributeBuffer;
#if USE_PREFIX_SUM_SPAWNCOUNT
StructuredBuffer<uint> spawnCountPrefixSum;
#endif

#if !VFX_USE_SPAWNER_FROM_GPU
    struct InitParams
    {
        uint spawnIndex;
        uint3 _pad;
    };

    StructuredBuffer<uint> eventCountPrefixSum;
    StructuredBuffer<InitParams> batchedInitParams;
#endif

CBUFFER_START(initParamsConst)
    uint dispatchWidth;
    
    float4 instancingConstants;
    
CBUFFER_END

#if USE_DEAD_LIST
RWStructuredBuffer<uint> deadListIn;
RWStructuredBuffer<uint> deadListCount;
StructuredBuffer<uint> deadListCountCopy;
#endif

#if VFX_USE_SPAWNER_FROM_GPU
StructuredBuffer<uint> eventList;
#endif

#if HAS_STRIPS
RWStructuredBuffer<uint> stripDataBuffer;
#endif

#include "Packages/com.unity.visualeffectgraph/Shaders/Common/VFXCommonCompute.hlsl"
#include "Packages/com.unity.visualeffectgraph/Shaders/VFXCommon.hlsl"



void SetAttribute_ED2BDC15(inout bool alive, bool Alive) /*attribute:alive Composition:Overwrite Source:Slot Random:Off channels:XYZ */
{
    alive = Alive;
}
void SetAttribute_3278B22F(inout float size, float Size) /*attribute:size Composition:Overwrite Source:Slot Random:Off channels:XYZ */
{
    size = Size;
}
void SetAttribute_E629755(inout float3 velocity, float3 Velocity) /*attribute:velocity Composition:Overwrite Source:Slot Random:Off channels:XYZ */
{
    velocity = Velocity;
}
void SetAttribute_CAC02F9E(inout float3 position, float3 Value) /*attribute:position Composition:Overwrite Source:Source Random:Off channels:XYZ */
{
    position = Value;
}
void SetAttribute_2CF4000A(inout float3 targetPosition, float3 TargetPosition) /*attribute:targetPosition Composition:Overwrite Source:Slot Random:Off channels:XYZ */
{
    targetPosition = TargetPosition;
}



#if HAS_STRIPS
bool GetParticleIndex(inout uint particleIndex, uint stripIndex, uint instanceIndex, uint stripCountPerInstance )
{
    uint relativeIndex;
    uint bufferIndex = (instanceIndex * stripCountPerInstance) + stripIndex;

    InterlockedAdd(STRIP_DATA(STRIP_NEXT_INDEX, bufferIndex), 1, relativeIndex);
    bool isFull = relativeIndex >= PARTICLE_PER_STRIP_COUNT;
    if (isFull)
    {
        InterlockedAdd(STRIP_DATA(STRIP_NEXT_INDEX, bufferIndex), -1); // Remove previous increment
    }
    else
    {
        particleIndex = stripIndex * PARTICLE_PER_STRIP_COUNT + ((STRIP_DATA(STRIP_FIRST_INDEX, bufferIndex) + relativeIndex) % PARTICLE_PER_STRIP_COUNT);
    }

    return !isFull;
}
#endif

[numthreads(NB_THREADS_PER_GROUP,1,1)]
void CSMain(uint3 groupId          : SV_GroupID,
            uint3 groupThreadId    : SV_GroupThreadID)
{
    uint id = groupThreadId.x + groupId.x * NB_THREADS_PER_GROUP;
#if !VFX_USE_SPAWNER_FROM_GPU
    id += groupId.y * dispatchWidth * NB_THREADS_PER_GROUP;
#endif
    
    uint instanceIndex, instanceActiveIndex, instanceCurrentIndex;
    #if defined(VFX_INSTANCING_FIXED_SIZE)
    	uint index = GetThreadId(groupId, 0, dispatchWidth);
    	index = VFXInitInstancing(index, instanceIndex, instanceActiveIndex, instanceCurrentIndex);
    	index += groupThreadId.x;
    #else
    	uint index = VFXInitInstancing(id, instanceIndex, instanceActiveIndex, instanceCurrentIndex);
    #endif
    
    

	ContextData contextData = instancingContextData[instanceActiveIndex];
	uint systemSeed = contextData.systemSeed;

    GraphValues graphValues;
    
    graphValues.Velocity_a = asfloat(graphValuesBuffer.Load3(instanceActiveIndex * 96  + 16));
    graphValues._vfx_enabled_a = (bool)graphValuesBuffer.Load(instanceActiveIndex * 96  + 28);
    graphValues.TargetPosition_a = asfloat(graphValuesBuffer.Load3(instanceActiveIndex * 96  + 32));
    graphValues.Alive_a = (bool)graphValuesBuffer.Load(instanceActiveIndex * 96  + 44);
    graphValues._vfx_enabled_b = (bool)graphValuesBuffer.Load(instanceActiveIndex * 96  + 48);
    graphValues.Size_a = asfloat(graphValuesBuffer.Load(instanceActiveIndex * 96  + 52));
    graphValues._vfx_enabled_c = (bool)graphValuesBuffer.Load(instanceActiveIndex * 96  + 56);
    graphValues._vfx_enabled_d = (bool)graphValuesBuffer.Load(instanceActiveIndex * 96  + 60);
    graphValues._vfx_enabled_e = (bool)graphValuesBuffer.Load(instanceActiveIndex * 96  + 64);
    


#if VFX_USE_SPAWNER_FROM_GPU
    uint elementCount = eventList[VFXGetEventListBufferElementCount(instanceActiveIndex)];
    uint totalAccumulatedElementCount = eventList[VFXGetEventListBufferAccumulatedCount(instanceActiveIndex)];
    uint maxThreadId = min(contextData.maxParticleCount, elementCount);
    uint currentSpawnIndex = totalAccumulatedElementCount - elementCount;
#else
    InitParams initParams = batchedInitParams[instanceActiveIndex];

    uint nbEvents = eventCountPrefixSum[instanceActiveIndex];
    [branch]
    if (instanceActiveIndex > 0u)
    {
        nbEvents -= eventCountPrefixSum[instanceActiveIndex - 1];
    }

    uint maxThreadId = instancingPrefixSum[instanceCurrentIndex];
    [branch]
    if (instanceCurrentIndex > instancingCurrentOffset)
    {
        maxThreadId -= instancingPrefixSum[instanceCurrentIndex - 1];
    }

    uint currentSpawnIndex = initParams.spawnIndex;
#endif

#if USE_DEAD_LIST
    maxThreadId = min(maxThreadId, deadListCountCopy[instanceIndex]);
#endif

    if (index < maxThreadId)
    {
#if VFX_USE_SPAWNER_FROM_GPU
        int sourceIndex = eventList[VFXGetEventListBufferIndex(id, instanceActiveIndex)];
#endif

        uint startEventIndex = 0u; //tmp for GPU Events
#if !VFX_USE_SPAWNER_FROM_GPU
        int sourceIndex = 0;

        startEventIndex = 0u;
        [branch]
        if (instanceActiveIndex > 0u)
        {
            startEventIndex = eventCountPrefixSum[instanceActiveIndex - 1];
        }
        #if USE_PREFIX_SUM_SPAWNCOUNT
            sourceIndex = BinarySearchPrefixSum(index, spawnCountPrefixSum, startEventIndex, startEventIndex + nbEvents) - startEventIndex;
        #endif

#endif

		VFXAttributes attributes = (VFXAttributes)0;
		VFXSourceAttributes sourceAttributes = (VFXSourceAttributes)0;

        attributes.alive = (bool)true;
        attributes.size = (float)0.100000001;
        attributes.velocity = float3(0, 0, 0);
        attributes.position = float3(0, 0, 0);
        attributes.targetPosition = float3(0, 0, 0);
        attributes.alpha = (float)1;
        attributes.age = (float)0;
        sourceAttributes.position = asfloat(sourceAttributeBuffer.Load3(((startEventIndex * 0x8) + (sourceIndex * 0x8 + 0x80)) << 2));
        


		uint particleIndex = index + currentSpawnIndex;
#if VFX_USE_PARTICLEID_CURRENT
         attributes.particleId = particleIndex;
#endif
#if VFX_USE_SEED_CURRENT
        attributes.seed = WangHash(particleIndex ^ systemSeed);
#endif
#if VFX_USE_SPAWNINDEX_CURRENT
        attributes.spawnIndex = id;
#endif
#if HAS_STRIPS
#if !VFX_USE_SPAWNER_FROM_GPU
		
#else
        uint stripIndex = sourceIndex;
#endif
		stripIndex = min(stripIndex, STRIP_COUNT);

        if (!GetParticleIndex(particleIndex, stripIndex, instanceIndex, STRIP_COUNT))
            return;

        const StripData stripData = GetStripDataFromStripIndex(stripIndex, instanceIndex);
		InitStripAttributesWithSpawn(maxThreadId, particleIndex, attributes, stripData);
		// TODO Change seed to be sure we're deterministic on random with strip
#endif

        if (graphValues._vfx_enabled_a)
        {
            SetAttribute_ED2BDC15( /*inout */attributes.alive, graphValues.Alive_a);
        }
        if (graphValues._vfx_enabled_b)
        {
            SetAttribute_3278B22F( /*inout */attributes.size, graphValues.Size_a);
        }
        if (graphValues._vfx_enabled_c)
        {
            SetAttribute_E629755( /*inout */attributes.velocity, graphValues.Velocity_a);
        }
        if (graphValues._vfx_enabled_d)
        {
            float3 tmp_bb = sourceAttributes.position;
            SetAttribute_CAC02F9E( /*inout */attributes.position, tmp_bb);
        }
        if (graphValues._vfx_enabled_e)
        {
            SetAttribute_2CF4000A( /*inout */attributes.targetPosition, graphValues.TargetPosition_a);
        }
        


#if VFX_USE_ALIVE_CURRENT
        if (attributes.alive)
#endif
        {
#if USE_DEAD_LIST
            uint deadIndex;
            InterlockedAdd(deadListCount[instanceIndex], -1, deadIndex);
            deadIndex -= 1;
            deadIndex += instanceIndex * RAW_CAPACITY;
            uint index = deadListIn[deadIndex];
#else
            uint index = particleIndex;
#endif
            attributeBuffer.Store(((instanceIndex * 0x53EDC0) + (index * 0x4 + 0x3)) << 2,uint(attributes.alive));
            attributeBuffer.Store(((instanceIndex * 0x53EDC0) + (index * 0x1 + 0x1E8500)) << 2,asuint(attributes.size));
            attributeBuffer.Store3(((instanceIndex * 0x53EDC0) + (index * 0x4 + 0x0)) << 2,asuint(attributes.velocity));
            attributeBuffer.Store3(((instanceIndex * 0x53EDC0) + (index * 0x4 + 0x262640)) << 2,asuint(attributes.position));
            attributeBuffer.Store(((instanceIndex * 0x53EDC0) + (index * 0x1 + 0x44AB40)) << 2,asuint(attributes.alpha));
            attributeBuffer.Store(((instanceIndex * 0x53EDC0) + (index * 0x1 + 0x4C4C80)) << 2,asuint(attributes.age));
            

        }
    }
}
