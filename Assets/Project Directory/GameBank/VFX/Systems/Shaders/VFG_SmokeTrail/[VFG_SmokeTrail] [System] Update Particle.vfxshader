//[VFG_SmokeTrail] [System] Update Particle,1
//Don't delete the previous line or this one
#pragma kernel CSMain
#pragma only_renderers d3d11 glcore gles3 metal vulkan xboxone xboxone xboxseries playstation ps5 switch


#define NB_THREADS_PER_GROUP 64
#define HAS_VFX_ATTRIBUTES 1
#define VFX_PASSDEPTH_ACTUAL (0)
#define VFX_PASSDEPTH_MOTION_VECTOR (1)
#define VFX_PASSDEPTH_SELECTION (2)
#define VFX_PASSDEPTH_PICKING (3)
#define VFX_PASSDEPTH_SHADOW (4)
#define VFX_USE_LIFETIME_CURRENT 1
#define VFX_USE_POSITION_CURRENT 1
#define VFX_USE_VELOCITY_CURRENT 1
#define VFX_USE_RATECOUNT_A_CURRENT 1
#define VFX_USE_EVENTCOUNT_CURRENT 1
#define VFX_USE_AGE_CURRENT 1
#define VFX_USE_ALIVE_CURRENT 1
#define VFX_USE_STRIPALIVE_CURRENT 1
#define RAW_CAPACITY 32u
#define VFX_LOCAL_SPACE 1
#include "Packages/com.unity.render-pipelines.universal/Runtime/VFXGraph/Shaders/VFXDefines.hlsl"
#define VFX_USE_GRAPH_VALUES 1
#define VFX_USE_INSTANCING 1
#define VFX_INSTANCING_FIXED_SIZE 64
#define VFX_INSTANCING_ACTIVE_INDIRECTION 1
#define VFX_INSTANCING_BATCH_INDIRECTION 1



struct GraphValues
{
    bool _vfx_enabled_d;
    float Rate_a;
    float deltaTime_a;
    bool _vfx_enabled_e;
    bool _vfx_enabled_f;
    bool _vfx_enabled_g;
};
ByteAddressBuffer graphValuesBuffer;



struct VFXAttributes
{
    float lifetime;
    float3 position;
    float3 velocity;
    float rateCount_a;
    uint eventCount;
    float age;
    bool alive;
    bool stripAlive;
};

struct VFXSourceAttributes
{
};

RWStructuredBuffer<uint> eventListOut_a;



#define IndirectOutputType uint

















// Strips tangent computation














#define USE_DEAD_LIST (VFX_USE_ALIVE_CURRENT && !HAS_STRIPS)

RWByteAddressBuffer attributeBuffer;

#if USE_DEAD_LIST
RWStructuredBuffer<uint> deadListOut;
RWStructuredBuffer<uint> deadListCount;
#endif

#if VFX_HAS_INDIRECT_DRAW
RWStructuredBuffer<uint> indirectBuffer;
#endif

#if HAS_STRIPS
RWStructuredBuffer<uint> stripDataBuffer;
#endif

#if VFX_USE_STRIPALIVE_CURRENT
StructuredBuffer<uint> attachedStripDataBuffer;
#endif

CBUFFER_START(updateParamsConst)
    uint dispatchWidth;
    
    float4 instancingConstants;
    
    float3 cameraXRSettings;
CBUFFER_END

#include "Packages/com.unity.visualeffectgraph/Shaders/Common/VFXCommonCompute.hlsl"
#include "Packages/com.unity.visualeffectgraph/Shaders/VFXCommon.hlsl"



#if VFX_HAS_INDIRECT_DRAW

void AppendOutputBuffer(RWStructuredBuffer<IndirectOutputType> outputBuffer, IndirectOutputType output, uint instanceActiveIndex)
{
    uint indirectIndex;
#if VFX_FEATURE_SORT
    InterlockedAdd(outputBuffer[instanceActiveIndex].index, 1, indirectIndex);
#else
    InterlockedAdd(outputBuffer[instanceActiveIndex], 1, indirectIndex);
#endif
    indirectIndex += instancingBatchSize + instanceActiveIndex * RAW_CAPACITY;
    outputBuffer[indirectIndex] = output;
}

#endif

void GPUEventRate_1(inout float rateCount_a, inout uint eventCount, float Rate, float deltaTime) /*mode:OverTime clampToOne:True */
{
    rateCount_a += deltaTime * Rate;
    uint count = floor(rateCount_a);
    rateCount_a = frac(rateCount_a);
    eventCount = count;
    eventCount = min(eventCount,1);
    
}
void EulerIntegration(inout float3 position, float3 velocity, float deltaTime)
{
    position += velocity * deltaTime;
}
void Age(inout float age, float deltaTime)
{
    age += deltaTime;
}
void Reap(float age, float lifetime, inout bool alive)
{
    if(age > lifetime) { alive = false; }
}





[numthreads(NB_THREADS_PER_GROUP,1,1)]
void CSMain(uint3 groupId          : SV_GroupID,
            uint3 groupThreadId    : SV_GroupThreadID)
{
	uint id = GetThreadId(groupId, groupThreadId, dispatchWidth);

	
	uint instanceIndex, instanceActiveIndex, instanceCurrentIndex;
	#if defined(VFX_INSTANCING_FIXED_SIZE)
		uint index = GetThreadId(groupId, 0, dispatchWidth);
		index = VFXInitInstancing(index, instanceIndex, instanceActiveIndex, instanceCurrentIndex);
		index += groupThreadId.x;
	#else
		uint index = VFXInitInstancing(id, instanceIndex, instanceActiveIndex, instanceCurrentIndex);
	#endif
	
	

	ContextData contextData = instancingContextData[instanceActiveIndex];
	uint systemSeed = contextData.systemSeed;
	uint nbMax = contextData.maxParticleCount;

#if VFX_COMPUTE_BOUNDS
	uint tid = groupThreadId.x;
#endif

	if (index < nbMax)
	{
        GraphValues graphValues;
        
        graphValues._vfx_enabled_d = (bool)graphValuesBuffer.Load(instanceActiveIndex * 208  + 180);
        graphValues.Rate_a = asfloat(graphValuesBuffer.Load(instanceActiveIndex * 208  + 184));
        graphValues.deltaTime_a = asfloat(graphValuesBuffer.Load(instanceActiveIndex * 208  + 188));
        graphValues._vfx_enabled_e = (bool)graphValuesBuffer.Load(instanceActiveIndex * 208  + 192);
        graphValues._vfx_enabled_f = (bool)graphValuesBuffer.Load(instanceActiveIndex * 208  + 196);
        graphValues._vfx_enabled_g = (bool)graphValuesBuffer.Load(instanceActiveIndex * 208  + 200);
        


        VFXAttributes attributes = (VFXAttributes)0;
		VFXSourceAttributes sourceAttributes = (VFXSourceAttributes)0;

#if VFX_USE_ALIVE_CURRENT
		attributes.alive = (attributeBuffer.Load(((instanceIndex * 0x180) + (index * 0x8 + 0x85)) << 2));
		attributes.stripAlive = (attributeBuffer.Load(((instanceIndex * 0x180) + (index * 0x8 + 0x86)) << 2));
		

		if (attributes.alive)
		{
			attributes.lifetime = asfloat(attributeBuffer.Load(((instanceIndex * 0x180) + (index * 0x4 + 0x3)) << 2));
			attributes.position = asfloat(attributeBuffer.Load3(((instanceIndex * 0x180) + (index * 0x8 + 0x80)) << 2));
			attributes.velocity = asfloat(attributeBuffer.Load3(((instanceIndex * 0x180) + (index * 0x4 + 0x0)) << 2));
			attributes.rateCount_a = asfloat(attributeBuffer.Load(((instanceIndex * 0x180) + (index * 0x8 + 0x83)) << 2));
			attributes.eventCount = (uint)0;
			uint eventCount_a = 0u; uint eventCount_a_Capacity = 500000;
			attributes.age = asfloat(attributeBuffer.Load(((instanceIndex * 0x180) + (index * 0x8 + 0x84)) << 2));
			


#if HAS_STRIPS
            const StripData stripData = GetStripDataFromParticleIndex(index, instanceIndex);
            InitStripAttributes(index, attributes, stripData);
            uint stripDataIndex = stripData.stripIndex + instanceIndex * STRIP_COUNT;
#endif

#if VFX_UPDATE_SKIP_ZERO_DELTA_TIME
			
			if (deltaTime != 0.0f)
#endif
			{
				if (graphValues._vfx_enabled_d)
				{
				    attributes.eventCount = 0u;
				    GPUEventRate_1( /*inout */attributes.rateCount_a,  /*inout */attributes.eventCount, graphValues.Rate_a, graphValues.deltaTime_a);
				    eventCount_a += attributes.eventCount;
				}
				if (graphValues._vfx_enabled_e)
				{
				    EulerIntegration( /*inout */attributes.position, attributes.velocity, graphValues.deltaTime_a);
				}
				if (graphValues._vfx_enabled_f)
				{
				    Age( /*inout */attributes.age, graphValues.deltaTime_a);
				}
				if (graphValues._vfx_enabled_g)
				{
				    Reap(attributes.age, attributes.lifetime,  /*inout */attributes.alive);
				}
				

			}

			if (attributes.alive)
			{
				attributeBuffer.Store3(((instanceIndex * 0x180) + (index * 0x8 + 0x80)) << 2,asuint(attributes.position));
				attributeBuffer.Store(((instanceIndex * 0x180) + (index * 0x8 + 0x83)) << 2,asuint(attributes.rateCount_a));
				attributeBuffer.Store(((instanceIndex * 0x180) + (index * 0x8 + 0x84)) << 2,asuint(attributes.age));
				attributeBuffer.Store(((instanceIndex * 0x180) + (index * 0x8 + 0x86)) << 2,uint(attributes.stripAlive));
				
				for (uint i_a = 0; i_a < min(eventCount_a, eventCount_a_Capacity); ++i_a)
				    AppendEventBuffer(eventListOut_a, index, eventCount_a_Capacity, instanceIndex);
				AppendEventTotalCount(eventListOut_a, min(eventCount_a, eventCount_a_Capacity), instanceIndex);
				
				

#if VFX_HAS_INDIRECT_DRAW
                AppendOutputBuffer(indirectBuffer, index, instanceActiveIndex);
#endif

#if HAS_STRIPS
				uint relativeIndexInStrip = GetRelativeIndex(index, stripData);
				InterlockedMin(STRIP_DATA(STRIP_MIN_ALIVE, stripDataIndex), relativeIndexInStrip);
				InterlockedMax(STRIP_DATA(STRIP_MAX_ALIVE, stripDataIndex), relativeIndexInStrip);
#endif
			}
			else
			{
				attributeBuffer.Store(((instanceIndex * 0x180) + (index * 0x8 + 0x85)) << 2,uint(attributes.alive));
				
				for (uint i_a = 0; i_a < min(eventCount_a, eventCount_a_Capacity); ++i_a)
				    AppendEventBuffer(eventListOut_a, index, eventCount_a_Capacity, instanceIndex);
				AppendEventTotalCount(eventListOut_a, min(eventCount_a, eventCount_a_Capacity), instanceIndex);
				
				

#if USE_DEAD_LIST && !VFX_USE_STRIPALIVE_CURRENT
	            uint deadIndex;
		        InterlockedAdd(deadListCount[instanceIndex], 1, deadIndex);
				deadIndex += instanceIndex * RAW_CAPACITY;
				deadListOut[deadIndex] = index;
#endif
			}
		}
#if USE_DEAD_LIST && VFX_USE_STRIPALIVE_CURRENT
        else if (attributes.stripAlive)
        {
            if (STRIP_DATA_X(attachedStripDataBuffer, STRIP_MIN_ALIVE, index) == ~1) // Attached strip is no longer alive, recycle the particle
            {
	            uint deadIndex;
		        InterlockedAdd(deadListCount[instanceIndex], 1, deadIndex);
				deadIndex += instanceIndex * RAW_CAPACITY;
				deadListOut[deadIndex] = index;
                attributes.stripAlive = false;
                attributeBuffer.Store(((instanceIndex * 0x180) + (index * 0x8 + 0x86)) << 2,uint(attributes.stripAlive));
                

            }
        }
#endif
#else
		attributes.lifetime = asfloat(attributeBuffer.Load(((instanceIndex * 0x180) + (index * 0x4 + 0x3)) << 2));
		attributes.position = asfloat(attributeBuffer.Load3(((instanceIndex * 0x180) + (index * 0x8 + 0x80)) << 2));
		attributes.velocity = asfloat(attributeBuffer.Load3(((instanceIndex * 0x180) + (index * 0x4 + 0x0)) << 2));
		attributes.rateCount_a = asfloat(attributeBuffer.Load(((instanceIndex * 0x180) + (index * 0x8 + 0x83)) << 2));
		attributes.eventCount = (uint)0;
		uint eventCount_a = 0u; uint eventCount_a_Capacity = 500000;
		attributes.age = asfloat(attributeBuffer.Load(((instanceIndex * 0x180) + (index * 0x8 + 0x84)) << 2));
		attributes.alive = (attributeBuffer.Load(((instanceIndex * 0x180) + (index * 0x8 + 0x85)) << 2));
		attributes.stripAlive = (attributeBuffer.Load(((instanceIndex * 0x180) + (index * 0x8 + 0x86)) << 2));
		

#if HAS_STRIPS
        const StripData stripData = GetStripDataFromParticleIndex(index, instanceIndex);
        InitStripAttributes(index, attributes, stripData);
#endif

#if VFX_UPDATE_SKIP_ZERO_DELTA_TIME
		
		if (deltaTime != 0.0f)
#endif
		{
			if (graphValues._vfx_enabled_d)
			{
			    attributes.eventCount = 0u;
			    GPUEventRate_1( /*inout */attributes.rateCount_a,  /*inout */attributes.eventCount, graphValues.Rate_a, graphValues.deltaTime_a);
			    eventCount_a += attributes.eventCount;
			}
			if (graphValues._vfx_enabled_e)
			{
			    EulerIntegration( /*inout */attributes.position, attributes.velocity, graphValues.deltaTime_a);
			}
			if (graphValues._vfx_enabled_f)
			{
			    Age( /*inout */attributes.age, graphValues.deltaTime_a);
			}
			if (graphValues._vfx_enabled_g)
			{
			    Reap(attributes.age, attributes.lifetime,  /*inout */attributes.alive);
			}
			

		}
		attributeBuffer.Store3(((instanceIndex * 0x180) + (index * 0x8 + 0x80)) << 2,asuint(attributes.position));
		attributeBuffer.Store(((instanceIndex * 0x180) + (index * 0x8 + 0x83)) << 2,asuint(attributes.rateCount_a));
		attributeBuffer.Store(((instanceIndex * 0x180) + (index * 0x8 + 0x84)) << 2,asuint(attributes.age));
		attributeBuffer.Store(((instanceIndex * 0x180) + (index * 0x8 + 0x85)) << 2,uint(attributes.alive));
		attributeBuffer.Store(((instanceIndex * 0x180) + (index * 0x8 + 0x86)) << 2,uint(attributes.stripAlive));
		
		for (uint i_a = 0; i_a < min(eventCount_a, eventCount_a_Capacity); ++i_a)
		    AppendEventBuffer(eventListOut_a, index, eventCount_a_Capacity, instanceIndex);
		AppendEventTotalCount(eventListOut_a, min(eventCount_a, eventCount_a_Capacity), instanceIndex);
		
		

#if VFX_HAS_INDIRECT_DRAW
        AppendOutputBuffer(indirectBuffer, index, instanceActiveIndex);
#endif
#endif
#if VFX_COMPUTE_BOUNDS
		
		float3 size3 = float3(attributes.size,attributes.size,attributes.size);
		#if VFX_USE_SCALEX_CURRENT
		size3.x *= attributes.scaleX;
		#endif
		#if VFX_USE_SCALEY_CURRENT
		size3.y *= attributes.scaleY;
		#endif
		#if VFX_USE_SCALEZ_CURRENT
		size3.z *= attributes.scaleZ;
		#endif
		
#if VFX_WORLD_SPACE
        
#else
        float4x4 worldToLocal = (float4x4)0;
#endif
		InitReduction(attributes, size3, tid, instanceIndex, worldToLocal);
#endif

	}
	#if VFX_COMPUTE_BOUNDS
	PerformBoundsReduction(index, tid, instanceIndex, nbMax);
	#endif
}
